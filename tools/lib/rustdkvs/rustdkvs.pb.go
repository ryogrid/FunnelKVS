// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: rustdkvs.proto

package rustdkvs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val string `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *RString) Reset() {
	*x = RString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RString) ProtoMessage() {}

func (x *RString) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RString.ProtoReflect.Descriptor instead.
func (*RString) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{0}
}

func (x *RString) GetVal() string {
	if x != nil {
		return x.Val
	}
	return ""
}

type INT32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val int32 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *INT32) Reset() {
	*x = INT32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *INT32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*INT32) ProtoMessage() {}

func (x *INT32) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use INT32.ProtoReflect.Descriptor instead.
func (*INT32) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{1}
}

func (x *INT32) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type UINT32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val uint32 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *UINT32) Reset() {
	*x = UINT32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UINT32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UINT32) ProtoMessage() {}

func (x *UINT32) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UINT32.ProtoReflect.Descriptor instead.
func (*UINT32) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{2}
}

func (x *UINT32) GetVal() uint32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type BOOL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val bool `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *BOOL) Reset() {
	*x = BOOL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BOOL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BOOL) ProtoMessage() {}

func (x *BOOL) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BOOL.ProtoReflect.Descriptor instead.
func (*BOOL) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{3}
}

func (x *BOOL) GetVal() bool {
	if x != nil {
		return x.Val
	}
	return false
}

type VOID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val int32 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *VOID) Reset() {
	*x = VOID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VOID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VOID) ProtoMessage() {}

func (x *VOID) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VOID.ProtoReflect.Descriptor instead.
func (*VOID) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{4}
}

func (x *VOID) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type SetRoutingInfosForce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredecessorInfo *NodeInfo `protobuf:"bytes,1,opt,name=predecessor_info,json=predecessorInfo,proto3" json:"predecessor_info,omitempty"`
	SuccessorInfo_0 *NodeInfo `protobuf:"bytes,2,opt,name=successor_info_0,json=successorInfo0,proto3" json:"successor_info_0,omitempty"`
	FtableEnry_0    *NodeInfo `protobuf:"bytes,3,opt,name=ftable_enry_0,json=ftableEnry0,proto3" json:"ftable_enry_0,omitempty"`
}

func (x *SetRoutingInfosForce) Reset() {
	*x = SetRoutingInfosForce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRoutingInfosForce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRoutingInfosForce) ProtoMessage() {}

func (x *SetRoutingInfosForce) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRoutingInfosForce.ProtoReflect.Descriptor instead.
func (*SetRoutingInfosForce) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{5}
}

func (x *SetRoutingInfosForce) GetPredecessorInfo() *NodeInfo {
	if x != nil {
		return x.PredecessorInfo
	}
	return nil
}

func (x *SetRoutingInfosForce) GetSuccessorInfo_0() *NodeInfo {
	if x != nil {
		return x.SuccessorInfo_0
	}
	return nil
}

func (x *SetRoutingInfosForce) GetFtableEnry_0() *NodeInfo {
	if x != nil {
		return x.FtableEnry_0
	}
	return nil
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId            uint32      `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	AddressStr        string      `protobuf:"bytes,2,opt,name=address_str,json=addressStr,proto3" json:"address_str,omitempty"`
	BornId            int32       `protobuf:"varint,3,opt,name=born_id,json=bornId,proto3" json:"born_id,omitempty"`
	SuccessorInfoList []*NodeInfo `protobuf:"bytes,4,rep,name=successor_info_list,json=successorInfoList,proto3" json:"successor_info_list,omitempty"`
	PredecessorInfo   []*NodeInfo `protobuf:"bytes,5,rep,name=predecessor_info,json=predecessorInfo,proto3" json:"predecessor_info,omitempty"`
	FingerTable       []*NodeInfo `protobuf:"bytes,6,rep,name=finger_table,json=fingerTable,proto3" json:"finger_table,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{6}
}

func (x *NodeInfo) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeInfo) GetAddressStr() string {
	if x != nil {
		return x.AddressStr
	}
	return ""
}

func (x *NodeInfo) GetBornId() int32 {
	if x != nil {
		return x.BornId
	}
	return 0
}

func (x *NodeInfo) GetSuccessorInfoList() []*NodeInfo {
	if x != nil {
		return x.SuccessorInfoList
	}
	return nil
}

func (x *NodeInfo) GetPredecessorInfo() []*NodeInfo {
	if x != nil {
		return x.PredecessorInfo
	}
	return nil
}

func (x *NodeInfo) GetFingerTable() []*NodeInfo {
	if x != nil {
		return x.FingerTable
	}
	return nil
}

type NodeInfoSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Succ0Id    uint32 `protobuf:"varint,2,opt,name=succ0_id,json=succ0Id,proto3" json:"succ0_id,omitempty"`
	AddressStr string `protobuf:"bytes,3,opt,name=address_str,json=addressStr,proto3" json:"address_str,omitempty"`
}

func (x *NodeInfoSummary) Reset() {
	*x = NodeInfoSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoSummary) ProtoMessage() {}

func (x *NodeInfoSummary) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoSummary.ProtoReflect.Descriptor instead.
func (*NodeInfoSummary) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{7}
}

func (x *NodeInfoSummary) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NodeInfoSummary) GetSucc0Id() uint32 {
	if x != nil {
		return x.Succ0Id
	}
	return 0
}

func (x *NodeInfoSummary) GetAddressStr() string {
	if x != nil {
		return x.AddressStr
	}
	return ""
}

type GlobalPut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyStr string `protobuf:"bytes,1,opt,name=key_str,json=keyStr,proto3" json:"key_str,omitempty"`
	ValStr string `protobuf:"bytes,2,opt,name=val_str,json=valStr,proto3" json:"val_str,omitempty"`
}

func (x *GlobalPut) Reset() {
	*x = GlobalPut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalPut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalPut) ProtoMessage() {}

func (x *GlobalPut) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalPut.ProtoReflect.Descriptor instead.
func (*GlobalPut) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{8}
}

func (x *GlobalPut) GetKeyStr() string {
	if x != nil {
		return x.KeyStr
	}
	return ""
}

func (x *GlobalPut) GetValStr() string {
	if x != nil {
		return x.ValStr
	}
	return ""
}

type Put struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId  uint32 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	ValStr string `protobuf:"bytes,2,opt,name=val_str,json=valStr,proto3" json:"val_str,omitempty"`
}

func (x *Put) Reset() {
	*x = Put{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Put) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Put) ProtoMessage() {}

func (x *Put) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Put.ProtoReflect.Descriptor instead.
func (*Put) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{9}
}

func (x *Put) GetKeyId() uint32 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *Put) GetValStr() string {
	if x != nil {
		return x.ValStr
	}
	return ""
}

type PassDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []*DataIdAndValue `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
}

func (x *PassDatas) Reset() {
	*x = PassDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassDatas) ProtoMessage() {}

func (x *PassDatas) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassDatas.ProtoReflect.Descriptor instead.
func (*PassDatas) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{10}
}

func (x *PassDatas) GetVals() []*DataIdAndValue {
	if x != nil {
		return x.Vals
	}
	return nil
}

type DataIdAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId uint32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	ValStr string `protobuf:"bytes,2,opt,name=val_str,json=valStr,proto3" json:"val_str,omitempty"`
}

func (x *DataIdAndValue) Reset() {
	*x = DataIdAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rustdkvs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataIdAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataIdAndValue) ProtoMessage() {}

func (x *DataIdAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_rustdkvs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataIdAndValue.ProtoReflect.Descriptor instead.
func (*DataIdAndValue) Descriptor() ([]byte, []int) {
	return file_rustdkvs_proto_rawDescGZIP(), []int{11}
}

func (x *DataIdAndValue) GetDataId() uint32 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *DataIdAndValue) GetValStr() string {
	if x != nil {
		return x.ValStr
	}
	return ""
}

var File_rustdkvs_proto protoreflect.FileDescriptor

var file_rustdkvs_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x22, 0x1b, 0x0a, 0x07, 0x52, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x19, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0x1a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x18,
	0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x18, 0x0a, 0x04, 0x56, 0x4f, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76,
	0x61, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x10, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x30, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x30, 0x12, 0x36, 0x0a, 0x0d, 0x66, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x79, 0x5f, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x72, 0x79, 0x30,
	0x22, 0x97, 0x02, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x72, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x72, 0x6e, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x74,
	0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x66, 0x0a, 0x0f, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x63, 0x63, 0x30, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x30, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x22, 0x3d, 0x0a, 0x09, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x75, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x22, 0x35, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x22, 0x39, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x76,
	0x61, 0x6c, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x32, 0xc0, 0x05, 0x0a, 0x08, 0x52, 0x75, 0x73, 0x74,
	0x44, 0x4b, 0x56, 0x53, 0x12, 0x40, 0x0a, 0x17, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x11, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x52, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x19, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x0e, 0x2e, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x4e, 0x0a, 0x1c, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x1a, 0x0e, 0x2e, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x42, 0x0a, 0x13, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x10, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x55, 0x49,
	0x4e, 0x54, 0x33, 0x32, 0x1a, 0x19, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x4c, 0x0a, 0x1d, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x12, 0x10, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x55, 0x49, 0x4e, 0x54,
	0x33, 0x32, 0x1a, 0x19, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x36, 0x0a,
	0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x75, 0x74,
	0x12, 0x13, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x75, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73,
	0x2e, 0x42, 0x4f, 0x4f, 0x4c, 0x12, 0x29, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x75,
	0x74, 0x12, 0x0d, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x50, 0x75, 0x74,
	0x1a, 0x0e, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x42, 0x4f, 0x4f, 0x4c,
	0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x67, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x52,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x65, 0x74, 0x12, 0x10, 0x2e, 0x72,
	0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x1a, 0x18,
	0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x13, 0x2e, 0x72, 0x75,
	0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x1a, 0x0e, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x2e, 0x42, 0x4f, 0x4f, 0x4c,
	0x12, 0x38, 0x0a, 0x12, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76,
	0x73, 0x2e, 0x56, 0x4f, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76,
	0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x79, 0x6f, 0x67, 0x72, 0x69, 0x64,
	0x2f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6b, 0x76, 0x73, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x6c, 0x69, 0x62, 0x2f, 0x72, 0x75, 0x73, 0x74, 0x64, 0x6b, 0x76, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rustdkvs_proto_rawDescOnce sync.Once
	file_rustdkvs_proto_rawDescData = file_rustdkvs_proto_rawDesc
)

func file_rustdkvs_proto_rawDescGZIP() []byte {
	file_rustdkvs_proto_rawDescOnce.Do(func() {
		file_rustdkvs_proto_rawDescData = protoimpl.X.CompressGZIP(file_rustdkvs_proto_rawDescData)
	})
	return file_rustdkvs_proto_rawDescData
}

var file_rustdkvs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_rustdkvs_proto_goTypes = []interface{}{
	(*RString)(nil),              // 0: rustdkvs.RString
	(*INT32)(nil),                // 1: rustdkvs.INT32
	(*UINT32)(nil),               // 2: rustdkvs.UINT32
	(*BOOL)(nil),                 // 3: rustdkvs.BOOL
	(*VOID)(nil),                 // 4: rustdkvs.VOID
	(*SetRoutingInfosForce)(nil), // 5: rustdkvs.SetRoutingInfosForce
	(*NodeInfo)(nil),             // 6: rustdkvs.NodeInfo
	(*NodeInfoSummary)(nil),      // 7: rustdkvs.NodeInfoSummary
	(*GlobalPut)(nil),            // 8: rustdkvs.GlobalPut
	(*Put)(nil),                  // 9: rustdkvs.Put
	(*PassDatas)(nil),            // 10: rustdkvs.PassDatas
	(*DataIdAndValue)(nil),       // 11: rustdkvs.DataIdAndValue
}
var file_rustdkvs_proto_depIdxs = []int32{
	6,  // 0: rustdkvs.SetRoutingInfosForce.predecessor_info:type_name -> rustdkvs.NodeInfo
	6,  // 1: rustdkvs.SetRoutingInfosForce.successor_info_0:type_name -> rustdkvs.NodeInfo
	6,  // 2: rustdkvs.SetRoutingInfosForce.ftable_enry_0:type_name -> rustdkvs.NodeInfo
	6,  // 3: rustdkvs.NodeInfo.successor_info_list:type_name -> rustdkvs.NodeInfo
	6,  // 4: rustdkvs.NodeInfo.predecessor_info:type_name -> rustdkvs.NodeInfo
	6,  // 5: rustdkvs.NodeInfo.finger_table:type_name -> rustdkvs.NodeInfo
	11, // 6: rustdkvs.PassDatas.vals:type_name -> rustdkvs.DataIdAndValue
	0,  // 7: rustdkvs.RustDKVS.grpc_test_get_node_info:input_type -> rustdkvs.RString
	7,  // 8: rustdkvs.RustDKVS.grpc_check_predecessor:input_type -> rustdkvs.NodeInfoSummary
	5,  // 9: rustdkvs.RustDKVS.grpc_set_routing_infos_force:input_type -> rustdkvs.SetRoutingInfosForce
	2,  // 10: rustdkvs.RustDKVS.grpc_find_successor:input_type -> rustdkvs.UINT32
	2,  // 11: rustdkvs.RustDKVS.grpc_closest_preceding_finger:input_type -> rustdkvs.UINT32
	8,  // 12: rustdkvs.RustDKVS.grpc_global_put:input_type -> rustdkvs.GlobalPut
	9,  // 13: rustdkvs.RustDKVS.grpc_put:input_type -> rustdkvs.Put
	0,  // 14: rustdkvs.RustDKVS.grpc_global_get:input_type -> rustdkvs.RString
	2,  // 15: rustdkvs.RustDKVS.grpc_get:input_type -> rustdkvs.UINT32
	10, // 16: rustdkvs.RustDKVS.grpc_pass_datas:input_type -> rustdkvs.PassDatas
	4,  // 17: rustdkvs.RustDKVS.grpc_get_node_info:input_type -> rustdkvs.VOID
	6,  // 18: rustdkvs.RustDKVS.grpc_test_get_node_info:output_type -> rustdkvs.NodeInfo
	3,  // 19: rustdkvs.RustDKVS.grpc_check_predecessor:output_type -> rustdkvs.BOOL
	3,  // 20: rustdkvs.RustDKVS.grpc_set_routing_infos_force:output_type -> rustdkvs.BOOL
	7,  // 21: rustdkvs.RustDKVS.grpc_find_successor:output_type -> rustdkvs.NodeInfoSummary
	7,  // 22: rustdkvs.RustDKVS.grpc_closest_preceding_finger:output_type -> rustdkvs.NodeInfoSummary
	3,  // 23: rustdkvs.RustDKVS.grpc_global_put:output_type -> rustdkvs.BOOL
	3,  // 24: rustdkvs.RustDKVS.grpc_put:output_type -> rustdkvs.BOOL
	11, // 25: rustdkvs.RustDKVS.grpc_global_get:output_type -> rustdkvs.DataIdAndValue
	11, // 26: rustdkvs.RustDKVS.grpc_get:output_type -> rustdkvs.DataIdAndValue
	3,  // 27: rustdkvs.RustDKVS.grpc_pass_datas:output_type -> rustdkvs.BOOL
	6,  // 28: rustdkvs.RustDKVS.grpc_get_node_info:output_type -> rustdkvs.NodeInfo
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_rustdkvs_proto_init() }
func file_rustdkvs_proto_init() {
	if File_rustdkvs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rustdkvs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*INT32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UINT32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BOOL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VOID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRoutingInfosForce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalPut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Put); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rustdkvs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataIdAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rustdkvs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rustdkvs_proto_goTypes,
		DependencyIndexes: file_rustdkvs_proto_depIdxs,
		MessageInfos:      file_rustdkvs_proto_msgTypes,
	}.Build()
	File_rustdkvs_proto = out.File
	file_rustdkvs_proto_rawDesc = nil
	file_rustdkvs_proto_goTypes = nil
	file_rustdkvs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RustDKVSClient is the client API for RustDKVS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RustDKVSClient interface {
	GrpcTestGetNodeInfo(ctx context.Context, in *RString, opts ...grpc.CallOption) (*NodeInfo, error)
	GrpcCheckPredecessor(ctx context.Context, in *NodeInfoSummary, opts ...grpc.CallOption) (*BOOL, error)
	GrpcSetRoutingInfosForce(ctx context.Context, in *SetRoutingInfosForce, opts ...grpc.CallOption) (*BOOL, error)
	GrpcFindSuccessor(ctx context.Context, in *UINT32, opts ...grpc.CallOption) (*NodeInfoSummary, error)
	GrpcClosestPrecedingFinger(ctx context.Context, in *UINT32, opts ...grpc.CallOption) (*NodeInfoSummary, error)
	GrpcGlobalPut(ctx context.Context, in *GlobalPut, opts ...grpc.CallOption) (*BOOL, error)
	GrpcPut(ctx context.Context, in *Put, opts ...grpc.CallOption) (*BOOL, error)
	GrpcGlobalGet(ctx context.Context, in *RString, opts ...grpc.CallOption) (*DataIdAndValue, error)
	GrpcGet(ctx context.Context, in *UINT32, opts ...grpc.CallOption) (*DataIdAndValue, error)
	GrpcPassDatas(ctx context.Context, in *PassDatas, opts ...grpc.CallOption) (*BOOL, error)
	// rpc grpc_global_delete(UINT32) returns (BOOL);
	GrpcGetNodeInfo(ctx context.Context, in *VOID, opts ...grpc.CallOption) (*NodeInfo, error)
}

type rustDKVSClient struct {
	cc grpc.ClientConnInterface
}

func NewRustDKVSClient(cc grpc.ClientConnInterface) RustDKVSClient {
	return &rustDKVSClient{cc}
}

func (c *rustDKVSClient) GrpcTestGetNodeInfo(ctx context.Context, in *RString, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_test_get_node_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcCheckPredecessor(ctx context.Context, in *NodeInfoSummary, opts ...grpc.CallOption) (*BOOL, error) {
	out := new(BOOL)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_check_predecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcSetRoutingInfosForce(ctx context.Context, in *SetRoutingInfosForce, opts ...grpc.CallOption) (*BOOL, error) {
	out := new(BOOL)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_set_routing_infos_force", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcFindSuccessor(ctx context.Context, in *UINT32, opts ...grpc.CallOption) (*NodeInfoSummary, error) {
	out := new(NodeInfoSummary)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_find_successor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcClosestPrecedingFinger(ctx context.Context, in *UINT32, opts ...grpc.CallOption) (*NodeInfoSummary, error) {
	out := new(NodeInfoSummary)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_closest_preceding_finger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcGlobalPut(ctx context.Context, in *GlobalPut, opts ...grpc.CallOption) (*BOOL, error) {
	out := new(BOOL)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_global_put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcPut(ctx context.Context, in *Put, opts ...grpc.CallOption) (*BOOL, error) {
	out := new(BOOL)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcGlobalGet(ctx context.Context, in *RString, opts ...grpc.CallOption) (*DataIdAndValue, error) {
	out := new(DataIdAndValue)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_global_get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcGet(ctx context.Context, in *UINT32, opts ...grpc.CallOption) (*DataIdAndValue, error) {
	out := new(DataIdAndValue)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcPassDatas(ctx context.Context, in *PassDatas, opts ...grpc.CallOption) (*BOOL, error) {
	out := new(BOOL)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_pass_datas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rustDKVSClient) GrpcGetNodeInfo(ctx context.Context, in *VOID, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, "/rustdkvs.RustDKVS/grpc_get_node_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RustDKVSServer is the server API for RustDKVS service.
type RustDKVSServer interface {
	GrpcTestGetNodeInfo(context.Context, *RString) (*NodeInfo, error)
	GrpcCheckPredecessor(context.Context, *NodeInfoSummary) (*BOOL, error)
	GrpcSetRoutingInfosForce(context.Context, *SetRoutingInfosForce) (*BOOL, error)
	GrpcFindSuccessor(context.Context, *UINT32) (*NodeInfoSummary, error)
	GrpcClosestPrecedingFinger(context.Context, *UINT32) (*NodeInfoSummary, error)
	GrpcGlobalPut(context.Context, *GlobalPut) (*BOOL, error)
	GrpcPut(context.Context, *Put) (*BOOL, error)
	GrpcGlobalGet(context.Context, *RString) (*DataIdAndValue, error)
	GrpcGet(context.Context, *UINT32) (*DataIdAndValue, error)
	GrpcPassDatas(context.Context, *PassDatas) (*BOOL, error)
	// rpc grpc_global_delete(UINT32) returns (BOOL);
	GrpcGetNodeInfo(context.Context, *VOID) (*NodeInfo, error)
}

// UnimplementedRustDKVSServer can be embedded to have forward compatible implementations.
type UnimplementedRustDKVSServer struct {
}

func (*UnimplementedRustDKVSServer) GrpcTestGetNodeInfo(context.Context, *RString) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcTestGetNodeInfo not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcCheckPredecessor(context.Context, *NodeInfoSummary) (*BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcCheckPredecessor not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcSetRoutingInfosForce(context.Context, *SetRoutingInfosForce) (*BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcSetRoutingInfosForce not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcFindSuccessor(context.Context, *UINT32) (*NodeInfoSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcFindSuccessor not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcClosestPrecedingFinger(context.Context, *UINT32) (*NodeInfoSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcClosestPrecedingFinger not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcGlobalPut(context.Context, *GlobalPut) (*BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcGlobalPut not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcPut(context.Context, *Put) (*BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcPut not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcGlobalGet(context.Context, *RString) (*DataIdAndValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcGlobalGet not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcGet(context.Context, *UINT32) (*DataIdAndValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcGet not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcPassDatas(context.Context, *PassDatas) (*BOOL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcPassDatas not implemented")
}
func (*UnimplementedRustDKVSServer) GrpcGetNodeInfo(context.Context, *VOID) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcGetNodeInfo not implemented")
}

func RegisterRustDKVSServer(s *grpc.Server, srv RustDKVSServer) {
	s.RegisterService(&_RustDKVS_serviceDesc, srv)
}

func _RustDKVS_GrpcTestGetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcTestGetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcTestGetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcTestGetNodeInfo(ctx, req.(*RString))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcCheckPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoSummary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcCheckPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcCheckPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcCheckPredecessor(ctx, req.(*NodeInfoSummary))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcSetRoutingInfosForce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoutingInfosForce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcSetRoutingInfosForce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcSetRoutingInfosForce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcSetRoutingInfosForce(ctx, req.(*SetRoutingInfosForce))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcFindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UINT32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcFindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcFindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcFindSuccessor(ctx, req.(*UINT32))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UINT32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcClosestPrecedingFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcClosestPrecedingFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcClosestPrecedingFinger(ctx, req.(*UINT32))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcGlobalPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalPut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcGlobalPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcGlobalPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcGlobalPut(ctx, req.(*GlobalPut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Put)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcPut(ctx, req.(*Put))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcGlobalGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcGlobalGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcGlobalGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcGlobalGet(ctx, req.(*RString))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UINT32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcGet(ctx, req.(*UINT32))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcPassDatas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassDatas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcPassDatas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcPassDatas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcPassDatas(ctx, req.(*PassDatas))
	}
	return interceptor(ctx, in, info, handler)
}

func _RustDKVS_GrpcGetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VOID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RustDKVSServer).GrpcGetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rustdkvs.RustDKVS/GrpcGetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RustDKVSServer).GrpcGetNodeInfo(ctx, req.(*VOID))
	}
	return interceptor(ctx, in, info, handler)
}

var _RustDKVS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rustdkvs.RustDKVS",
	HandlerType: (*RustDKVSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "grpc_test_get_node_info",
			Handler:    _RustDKVS_GrpcTestGetNodeInfo_Handler,
		},
		{
			MethodName: "grpc_check_predecessor",
			Handler:    _RustDKVS_GrpcCheckPredecessor_Handler,
		},
		{
			MethodName: "grpc_set_routing_infos_force",
			Handler:    _RustDKVS_GrpcSetRoutingInfosForce_Handler,
		},
		{
			MethodName: "grpc_find_successor",
			Handler:    _RustDKVS_GrpcFindSuccessor_Handler,
		},
		{
			MethodName: "grpc_closest_preceding_finger",
			Handler:    _RustDKVS_GrpcClosestPrecedingFinger_Handler,
		},
		{
			MethodName: "grpc_global_put",
			Handler:    _RustDKVS_GrpcGlobalPut_Handler,
		},
		{
			MethodName: "grpc_put",
			Handler:    _RustDKVS_GrpcPut_Handler,
		},
		{
			MethodName: "grpc_global_get",
			Handler:    _RustDKVS_GrpcGlobalGet_Handler,
		},
		{
			MethodName: "grpc_get",
			Handler:    _RustDKVS_GrpcGet_Handler,
		},
		{
			MethodName: "grpc_pass_datas",
			Handler:    _RustDKVS_GrpcPassDatas_Handler,
		},
		{
			MethodName: "grpc_get_node_info",
			Handler:    _RustDKVS_GrpcGetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rustdkvs.proto",
}
